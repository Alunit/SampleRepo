* git init
* git clone <URL>
  从URL指定的地址复制项目
* git remote add origin <URL>
* git remote set-url origin <URL>
  可以用来更换传输协议
  (显示：git remote -v )
* git chekout -- <file>
  丢弃工作区的修改，回退到上次add后，或commit后的状态
* git reset HEAD <file>
  add后，commit之前，将暂存区打回工作区
* git reflog
  查看命令历史
* git reset --hard <commit-id>
  git reset --hard HEAD^
  commit后，push之前，回退到commit-id版本
  HEAD^指上一个版本，每一个^向前一个版本
* git pull origin master --allow-unrelated-histories
  同步远程库origin的master分支到本地，本地的库并不是clone产生的，
  需使用--allow-unrelated-histories。
* git add <file>
  如果在add之后再次修改了文件，又想将修改提交，则需再次add。
* git commit -m "<LOG>"
* git push -u origin <本地分支>:<远程分支>
  将本地的master分支推送到origin的master分支，-u表示upstream
* git branch <本地分支>
  创建本地分支
* git branch
  显示本地分支
* git push origin <本地分支>:<远程分支>
  同步本地分支和远程分支
* git checkout dev
  切换当前分支到dev
* git merge dev
  将dev分支的更改合并到master分支
* git checkout -- dev origin/dev
  等于 git checkout -b dev origin/dev
  创建本地dev分支，并与远程dev关联
* 
